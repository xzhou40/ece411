2. Description of Blocks
valid_bit_A/B:	this is a 1-bit array to store valid bits of way0/1
tag_store_A/B:	this is a 9-bit array to store tag bits of way0/1
dirty_bit_A/B:	this is a 1-bit array to store dirty bits of way0/1
data_store_A/B:	this is a 128-bit array to store cachelines of way0/1
tag_compare_A/B:this is a a comparator module to compare mem_address[15:7] and tags. This module works
				together with valid bits arrays in order to check if we have a cache hit.


3. Test strategy:
I used unit tests for this MP. To be more specific, I used multiple small pieces of codes, each recreates an unique scenario to fully test my code's functionality.
Below is an example testing if my cache writes back for way 0 works properly given LRU and cache reads are both correct.

ORIGIN 0
SEGMENT 0 CODE:
	LDR R1, R0, l1p
	LDR R2, R0, l2p
	LDR R3, R0, l3p
	LDR R4, R1, 0 ; cache miss, loads line1
	LDR R5, R2, 0 ; cache miss, loads line2
	STB R5, R1, 0 ; cache hit, sets line2 as LRU, write to line1
	LDR R4, R1, 0 ; cache hit, sets line2 as LRU
	LDR R5, R2, 0 ; cache hit, sets line1 as LRU
	LDR R6, R3, 0 ; cache miss, loads and write back line1
inf:
	BRnzp inf

l1p:	DATA2 line1
l2p:	DATA2 line2
l3p:	DATA2 line3

SEGMENT 32 line1:
X:	DATA2 4x1111
NOP
NOP
NOP
NOP
NOP
NOP
NOP


SEGMENT 128 line2:
Y:	DATA2 4x2222
NOP
NOP
NOP
NOP
NOP
NOP
NOP

SEGMENT 128 line3:
Z:	DATA2 4x3333
NOP
NOP
NOP
NOP
NOP
NOP
NOP